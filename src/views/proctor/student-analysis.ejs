<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student AI Analysis</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #FFDAB9;
            margin: 0;
            padding: 0;
        }

        .analysis-container {
            max-width: 1000px;
            margin: 2rem auto;
            padding: 2rem;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 16px rgba(139, 0, 0, 0.1);
        }

        .analysis-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: #800000;
            border-bottom: 2px solid #FFDAB9;
            padding-bottom: 1rem;
            margin-bottom: 2rem;
        }

        .student-selector {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .student-selector select {
            flex-grow: 1;
            padding: 8px 12px;
            border: 1px solid #FFDAB9;
            border-radius: 4px;
            font-size: 16px;
        }

        .analyze-btn {
            background-color: #800000;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 15px;
            cursor: pointer;
            font-weight: 500;
        }

        .analysis-sections {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 30px;
        }

        .analysis-card {
            background-color: #FFF8EE;
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(139, 0, 0, 0.08);
            border-left: 4px solid #800000;
        }

        .card-title {
            margin-top: 0;
            color: #800000;
            border-bottom: 1px solid #FFE4B5;
            padding-bottom: 0.5rem;
        }

        .loading {
            text-align: center;
            color: #666;
            padding: 40px 0;
        }

        .loading i {
            font-size: 2rem;
            color: #800000;
            margin-bottom: 10px;
            animation: spin 2s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .performance-indicators {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
        }

        .indicator {
            background-color: white;
            border-radius: 8px;
            padding: 15px;
            flex: 1;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .indicator-value {
            font-size: 2rem;
            font-weight: bold;
            color: #800000;
            display: block;
            margin: 10px 0;
        }

        .indicator-label {
            color: #666;
            font-size: 0.9rem;
        }

        .back-button {
            padding: 8px 16px;
            background-color: #f5f5f5;
            border: none;
            border-radius: 4px;
            color: #333;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .back-button i {
            font-size: 0.8rem;
        }

        .full-analysis {
            line-height: 1.6;
            white-space: pre-line;
        }
    </style>
</head>

<body>
    <%- include('../partials/header') %>

        <div class="analysis-container">
            <div class="analysis-header">
                <h1>Student AI Analysis</h1>
                <button class="back-button" onclick="window.location.href='/proctor/dashboard'">
                    <i class="fas fa-arrow-left"></i> Back to Dashboard
                </button>
            </div>

            <div class="student-selector">
                <select id="student-select">
                    <option value="">Select a student...</option>
                    <!-- Will be populated dynamically -->
                </select>
                <button id="generate-analysis" class="analyze-btn">Generate Analysis</button>
            </div>

            <!-- Loading indicator (initially hidden) -->
            <div id="loading" class="loading" style="display: none;">
                <i class="fas fa-spinner"></i>
                <p>Analyzing student data...</p>
            </div>

            <!-- Analysis content (initially hidden) -->
            <div id="analysis-content" style="display: none;">
                <div class="performance-indicators">
                    <div class="indicator">
                        <span id="cgpa-value" class="indicator-value">--</span>
                        <span class="indicator-label">Current CGPA</span>
                    </div>
                    <div class="indicator">
                        <span id="attendance-value" class="indicator-value">--</span>
                        <span class="indicator-label">Attendance</span>
                    </div>
                    <div class="indicator">
                        <span id="trend-value" class="indicator-value">--</span>
                        <span class="indicator-label">Performance Trend</span>
                    </div>
                </div>

                <div class="analysis-sections">
                    <div class="analysis-card">
                        <h3 class="card-title">Overall Analysis</h3>
                        <div id="overall-analysis"></div>
                    </div>
                    <div class="analysis-card">
                        <h3 class="card-title">Strengths</h3>
                        <div id="strengths-analysis"></div>
                    </div>
                    <div class="analysis-card">
                        <h3 class="card-title">Areas for Improvement</h3>
                        <div id="improvement-analysis"></div>
                    </div>
                    <div class="analysis-card">
                        <h3 class="card-title">Recommendations</h3>
                        <div id="recommendations-analysis"></div>
                    </div>
                </div>

                <div class="analysis-card" style="margin-top: 20px;">
                    <h3 class="card-title">Full Analysis</h3>
                    <div id="full-analysis" class="full-analysis"></div>
                </div>
            </div>
        </div>

        <script>
            // Function to safely get DOM element
            function getElement(id) {
                const element = document.getElementById(id);
                if (!element) {
                    console.warn(`Element with ID '${id}' not found`);
                }
                return element;
            }

            // Function to populate student dropdown
            function loadStudents() {
                const select = getElement('student-select');
                if (!select) return;

                fetch('/proctor/api/proctor/students')
                    .then(response => response.json())
                    .then(data => {
                        if (data && data.students) {
                            data.students.forEach(student => {
                                const option = document.createElement('option');
                                option.value = student.id;
                                option.textContent = student.name;
                                select.appendChild(option);
                            });

                            // Check if there's a student ID in the URL
                            const urlParams = new URLSearchParams(window.location.search);
                            const studentId = urlParams.get('student');
                            if (studentId) {
                                select.value = studentId;
                                generateAnalysis();
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error loading students:', error);
                    });
            }

            // Enhanced error handling in generateAnalysis
            function generateAnalysis() {
                const select = getElement('student-select');
                const studentId = select.value;

                console.log('Selected studentId:', studentId);

                if (!studentId) {
                    alert('Please select a student first');
                    return;
                }

                // Show loading, hide content
                getElement('loading').style.display = 'block';
                getElement('analysis-content').style.display = 'none';

                // Call the API for full analysis (POST, not GET)
                fetch('/ai/proctor/analyze-student', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ studentId })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Hide loading
                        getElement('loading').style.display = 'none';

                        if (data.success) {
                            // Update the UI with analysis data
                            displayAnalysis(data);
                            // Show content
                            getElement('analysis-content').style.display = 'block';
                        } else {
                            alert('Error generating analysis: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        getElement('loading').style.display = 'none';
                        alert('An error occurred while generating the analysis. Please try again.');
                    });
            }

            // Function to display the analysis
            function displayAnalysis(data) {
                // Update performance indicators
                if (data.performanceData) {
                    getElement('cgpa-value').textContent = data.performanceData.cgpa || '--';
                    getElement('attendance-value').textContent = (data.performanceData.attendance || '--') + '%';

                    // Determine performance trend
                    const trend = determineTrend(data.performanceData);
                    getElement('trend-value').textContent = trend.symbol;
                    getElement('trend-value').style.color = trend.color;
                }

                // Update analysis sections
                if (data.sections) {
                    getElement('overall-analysis').textContent = data.sections.overall || 'No overall analysis available';
                    getElement('strengths-analysis').textContent = data.sections.strengths || 'No strengths identified';
                    getElement('improvement-analysis').textContent = data.sections.improvement || 'No improvement areas identified';
                    getElement('recommendations-analysis').textContent = data.sections.recommendations || 'No recommendations available';
                }

                // Update full analysis
                getElement('full-analysis').textContent = data.analysis || 'No detailed analysis available';
            }

            // Function to determine performance trend
            function determineTrend(performanceData) {
                if (!performanceData || !performanceData.semesterProgress) {
                    return { symbol: '--', color: '#666' };
                }

                const progress = performanceData.semesterProgress;

                if (progress > 0.05) { // Significant improvement
                    return { symbol: '↑', color: '#2e7d32' };
                } else if (progress < -0.05) { // Significant decline
                    return { symbol: '↓', color: '#c62828' };
                } else { // Stable
                    return { symbol: '→', color: '#f57c00' };
                }
            }

            // Initialize page
            document.addEventListener('DOMContentLoaded', function () {
                loadStudents();

                // Add event listener for generate button
                const generateBtn = getElement('generate-analysis');
                if (generateBtn) {
                    generateBtn.addEventListener('click', generateAnalysis);
                }
            });
        </script>
</body>

</html>