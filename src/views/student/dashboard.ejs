<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="icon" href="data:,">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #FFDAB9;
            margin: 0;
            padding: 0;
        }

        .dashboard-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 2rem;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 16px rgba(139, 0, 0, 0.1);
        }

        .welcome-header {
            color: #800000;
            border-bottom: 2px solid #FFDAB9;
            padding-bottom: 1rem;
            margin-bottom: 2rem;
        }

        /* Three-column layout */
        .dashboard-top-row {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .dashboard-column {
            flex: 1;
            width: 33.33%;
            min-width: 0;
        }

        /* Widget styling */
        .widget {
            background-color: #FFF8EE;
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(139, 0, 0, 0.08);
            height: 100%;
            min-height: 450px;
            display: flex;
            flex-direction: column;
            box-sizing: border-box;
            margin-bottom: 20px;
        }

        .widget h3 {
            color: #800000;
            margin-top: 0;
            border-bottom: 1px solid #FFE4B5;
            padding-bottom: 0.5rem;
            margin-bottom: 1rem;
        }

        .ai-widget {
            background: linear-gradient(to bottom right, #FFF8EE, #FFEFD5);
            border-left: 4px solid #800000;
            margin-top: 50px;
            margin-bottom: -3px;
        }

        .widget-header {
            display: flex;
            align-items: center;
            padding-bottom: 10px;
            border-bottom: 1px solid #FFE4B5;
        }

        .widget-header h3 {
            margin: 0;
            color: #800000;
            font-size: 1.2rem;
            border-bottom: none;
        }

        .widget-header i {
            margin-right: 8px;
            color: #800000;
        }

        .widget-content {
            padding: 15px 0;
        }

        .widget-content p {
            margin-top: 0;
            color: #555;
        }

        /* Profile specific styles */
        .profile-details {
            margin-bottom: 15px;
        }

        .profile-details p {
            margin: 8px 0;
        }

        .not-assigned {
            color: #777;
            font-style: italic;
        }

        .edit-profile-btn {
            display: inline-block;
            background-color: #800000;
            color: white;
            padding: 6px 12px;
            border-radius: 4px;
            text-decoration: none;
            font-size: 0.9rem;
        }

        .edit-profile-btn:hover {
            background-color: #990000;
            text-decoration: none;
            color: white;
        }

        /* AI features styling */
        .ai-features {
            display: flex;
            flex-wrap: wrap;
            margin: 10px 0;
            gap: 10px;
        }

        .ai-feature {
            background-color: rgba(255, 218, 185, 0.5);
            border-radius: 15px;
            padding: 4px 10px;
            font-size: 0.85rem;
            color: #800000;
        }

        .ai-feature i {
            margin-right: 5px;
            color: #800000;
        }

        .quick-question-form {
            display: flex;
            margin: 15px 0;
            gap: 5px;
        }

        .quick-question-form input {
            flex-grow: 1;
            padding: 8px 12px;
            border: 1px solid #FFDAB9;
            border-radius: 4px;
            font-size: 0.9rem;
        }

        .quick-question-form button {
            background-color: #800000;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 15px;
            cursor: pointer;
            font-weight: 500;
        }

        .quick-answer {
            margin: 10px 0;
            padding: 10px;
            background-color: white;
            border-radius: 4px;
            border-left: 3px solid #800000;
            font-size: 0.9rem;
            max-height: 100px;
            overflow-y: auto;
            display: none;
        }

        .ai-button {
            display: block;
            text-align: center;
            background-color: #800000;
            color: white;
            padding: 10px;
            border-radius: 4px;
            text-decoration: none;
            margin-top: 15px;
            font-weight: 500;
            transition: background-color 0.2s;
        }

        .ai-button:hover {
            background-color: #990000;
            text-decoration: none;
            color: white;
        }

        .ai-button i {
            margin-right: 5px;
        }

        /* Performance controls */
        .performance-controls {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 15px;
        }

        .select-group {
            display: flex;
            flex-direction: column;
            min-width: 150px;
        }

        .select-group label {
            font-size: 0.9rem;
            margin-bottom: 5px;
            color: #555;
        }

        .select-group select {
            padding: 8px 10px;
            border: 1px solid #FFE4B5;
            border-radius: 4px;
            background-color: white;
            color: #333;
        }

        #exam-form-container {
            background-color: #FFF8EE;
            padding: 15px;
            border-radius: 6px;
            margin-top: 15px;
            border: 1px solid #FFE4B5;
        }

        .form-row {
            margin-bottom: 12px;
            display: flex;
            align-items: center;
        }

        .subject-row {
            display: grid;
            grid-template-columns: 1fr 100px 40px;
            gap: 10px;
            align-items: center;
            margin-bottom: 8px;
        }

        .subject-row input[type="text"] {
            padding: 8px;
            border: 1px solid #FFE4B5;
            border-radius: 4px;
        }

        .subject-row input[type="number"] {
            padding: 8px;
            border: 1px solid #FFE4B5;
            border-radius: 4px;
            width: 80px;
        }

        .remove-subject {
            background: none;
            border: none;
            color: #d9534f;
            cursor: pointer;
            font-size: 1.2rem;
        }

        .cgpa-row {
            display: grid;
            grid-template-columns: 120px 1fr;
            gap: 10px;
            align-items: center;
            padding-top: 10px;
            border-top: 1px dashed #FFE4B5;
        }

        .form-actions {
            margin-top: 15px;
            display: flex;
            justify-content: flex-end;
        }

        .primary-button {
            background-color: #800000;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }

        .primary-button:hover {
            background-color: #990000;
        }

        .secondary-button {
            background-color: #FFDAB9;
            color: #800000;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .secondary-button:hover {
            background-color: #FFE4C4;
        }

        #no-data-message {
            color: #666;
            font-style: italic;
        }

        /* Success message styling */
        .success-message {
            background-color: #e8f5e9;
            color: #2e7d32;
            padding: 8px 12px;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .announcements {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        .announcement-item {
            background-color: #fff;
            border-left: 4px solid #8B0000;
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 3px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12);
        }

        .announcement-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }

        .announcement-title {
            font-weight: bold;
            font-size: 16px;
            color: #8B0000;
        }

        .announcement-date {
            color: #777;
            font-size: 14px;
        }

        .announcement-content {
            color: #333;
            margin-bottom: 10px;
            white-space: pre-line;
        }

        .announcement-footer {
            font-size: 14px;
            color: #555;
            text-align: right;
        }

        .announcement-form {
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }

        .announcement-form h4 {
            margin-bottom: 15px;
            color: #8B0000;
        }

        /* Responsive adjustments */
        @media (max-width: 992px) {
            .dashboard-top-row {
                flex-direction: column;
            }

            .dashboard-column {
                width: 100%;
            }

            .widget {
                min-height: auto;
                margin-bottom: 20px;
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>

<body>
    <div class="dashboard-container">
        <div class="welcome-header">
            <h1>Student Dashboard</h1>
            <p>Welcome, <%= user.name %>!</p>
        </div>

        <!-- Three-column layout for the top row -->
        <div class="dashboard-top-row">
            <!-- Profile Column -->
            <div class="dashboard-column">
                <div class="widget">
                    <h3>Your Profile</h3>
                    <div class="profile-details">
                        <p><strong>Email:</strong>
                            <%= user.email %>
                        </p>
                        <p><strong>Role:</strong>
                            <%= user.role %>
                        </p>
                        <p><strong>Batch:</strong>
                            <%= user.batch || 'Not set' %>
                        </p>
                        <p><strong>Current Semester:</strong>
                            <%= user.current_semester || 'Not set' %>
                        </p>
                        <p><strong>Section:</strong>
                            <%= user.section || 'Not set' %>
                        </p>
                        <p><strong>USN:</strong>
                            <%= user.roll_number || 'Not set' %>
                        </p>
                        <% if (user.proctor_name) { %>
                            <p><strong>Assigned Proctor:</strong>
                                <%= user.proctor_name %>
                            </p>
                            <% } else { %>
                                <p><strong>Assigned Proctor:</strong> <span class="not-assigned">Not assigned yet</span>
                                </p>
                                <% } %>
                    </div>
                    <a href="/student/profile" class="edit-profile-btn">Edit Profile</a>
                </div>
            </div>
            <div class="dashboard-column">
                <div class="widget">
                    <h3>Announcements</h3>
                    <div id="announcements-list">
                        <p>Loading announcements...</p>
                    </div>
                </div>
            </div>


            <!-- Academic Performance Column -->
            <div class="dashboard-column">
                <div class="widget">
                    <h3>Academic Performance</h3>

                    <div class="performance-controls">
                        <div class="select-group">
                            <label for="semester-select">Semester:</label>
                            <select id="semester-select" onchange="loadSemesterData()">
                                <option value="">Select Semester</option>
                                <option value="1">Semester 1</option>
                                <option value="2">Semester 2</option>
                                <option value="3">Semester 3</option>
                                <option value="4">Semester 4</option>
                                <option value="5">Semester 5</option>
                                <option value="6">Semester 6</option>
                                <option value="7">Semester 7</option>
                                <option value="8">Semester 8</option>
                            </select>
                        </div>

                        <div class="select-group" id="exam-type-container" style="display: none;">
                            <label for="exam-type">Exam Type:</label>
                            <select id="exam-type-select" onchange="showExamForm()">
                                <option value="">Select Exam</option>
                                <option value="ia1">1st Internal Assessment</option>
                                <option value="ia2">2nd Internal Assessment</option>
                                <option value="ia3">3rd Internal Assessment</option>
                                <option value="sem">Semester End Exam</option>
                            </select>
                        </div>
                    </div>
                    <div id="exam-form-container" style="display: none;">
                        <form id="marks-form">
                            <div id="subjects-container">
                                <!-- Subject inputs will be added here dynamically -->
                            </div>

                            <div class="form-row" id="add-subject-row" style="margin-top: 10px;">
                                <button type="button" id="add-subject-btn" onclick="addSubject()"
                                    class="secondary-button">
                                    <i class="fas fa-plus"></i> Add Subject
                                </button>
                            </div>

                            <div class="form-row cgpa-row" style="margin-top: 15px;">
                                <label for="semester-cgpa">Semester CGPA:</label>
                                <input type="number" id="semester-cgpa" min="0" max="10" step="0.01"
                                    placeholder="Enter CGPA (0-10)">
                            </div>

                            <div class="form-actions">
                                <button type="button" onclick="saveMarks()" class="primary-button">Save</button>
                            </div>
                        </form>
                    </div>
                    <div id="performance-chart-container" style="display: none; margin-top: 20px;">
                        <h4 style="color: #800000; margin-top: 20px;">Performance Overview</h4>
                        <canvas id="performance-chart" width="400" height="200"></canvas>
                    </div>

                    <p id="no-data-message">Select a semester to view or update performance data</p>
                </div>
            </div>
        </div>

        <!-- Full-width AI Assistant widget below the three columns -->
        <div class="widget ai-widget">
            <div class="widget-header">
                <h3><i class="fas fa-robot"></i> AI Study Assistant</h3>
            </div>
            <div class="widget-content">
                <p>Get instant help with your studies using our AI assistant.</p>
                <div class="ai-features">
                    <span class="ai-feature"><i class="fas fa-check"></i> Homework help</span>
                    <span class="ai-feature"><i class="fas fa-check"></i> Concept explanations</span>
                    <span class="ai-feature"><i class="fas fa-check"></i> Study tips</span>
                </div>
                <div class="quick-question-form">
                    <input type="text" id="quick-question" placeholder="Ask a quick question...">
                    <button onclick="askQuickQuestion()">Ask</button>
                </div>
                <div id="quick-answer" class="quick-answer"></div>
                <a href="/ai/student/assistant" class="ai-button">
                    <i class="fas fa-comment-dots"></i> Open Full AI Assistant
                </a>
            </div>
        </div>
    </div>

    <script>
        // Quick Question functionality
        function askQuickQuestion() {
            const question = document.getElementById('quick-question').value;
            const answerBox = document.getElementById('quick-answer');

            if (!question.trim()) return;

            // Show loading state
            answerBox.style.display = 'block';
            answerBox.textContent = 'Thinking...';

            // Call the AI API
            fetch('/ai/student/assistant/ask', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    question: question,
                    subject: 'general'
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.answer) {
                        answerBox.textContent = data.answer;
                    } else {
                        answerBox.textContent = 'Sorry, I couldn\'t process that question. Please try the full AI Assistant.';
                    }
                })
                .catch(error => {
                    answerBox.textContent = 'An error occurred. Please try again.';
                    console.error('Error:', error);
                });
        }

        // Allow pressing Enter to submit question
        document.getElementById('quick-question')?.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                askQuickQuestion();
            }
        });
    </script>

    <script>
        // Store subjects for each semester and exam type
        const semesterData = {};
        let currentSemester = '';
        let currentExamType = '';

        // Load data when semester is selected
        function loadSemesterData() {
            currentSemester = document.getElementById('semester-select').value;
            const examTypeContainer = document.getElementById('exam-type-container');
            const examFormContainer = document.getElementById('exam-form-container');
            const noDataMessage = document.getElementById('no-data-message');

            if (currentSemester) {
                examTypeContainer.style.display = 'block';
                noDataMessage.style.display = 'none';

                // Initialize semester data if not exists
                if (!semesterData[currentSemester]) {
                    semesterData[currentSemester] = {
                        ia1: { subjects: [], cgpa: '' },
                        ia2: { subjects: [], cgpa: '' },
                        ia3: { subjects: [], cgpa: '' },
                        sem: { subjects: [], cgpa: '' }
                    };
                }

                // Reset exam type selection
                document.getElementById('exam-type-select').value = '';
                examFormContainer.style.display = 'none';

                // Display chart if we have data
                displayPerformanceChart();
            } else {
                examTypeContainer.style.display = 'none';
                examFormContainer.style.display = 'none';
                noDataMessage.style.display = 'block';

                // Hide chart if no semester selected
                document.getElementById('performance-chart-container').style.display = 'none';
            }
        }

        function loadPerformanceData() {
            // Show loading indicator
            document.getElementById('no-data-message').textContent = 'Loading your performance data...';

            // Fetch data from server
            fetch('/student/api/performance')
                .then(response => response.json())
                .then(result => {
                    if (result.success && result.data) {
                        // Store the data in our local variable
                        Object.keys(result.data).forEach(semester => {
                            semesterData[semester] = result.data[semester];
                        });
                        document.getElementById('no-data-message').textContent = 'Select a semester to view or update performance data';
                    } else {
                        document.getElementById('no-data-message').textContent = 'No performance data found. Select a semester to add data.';
                    }
                })
                .catch(error => {
                    console.error('Error loading performance data:', error);
                    document.getElementById('no-data-message').textContent = 'Error loading data. Please refresh the page.';
                });
        }

        // Show exam form when exam type is selected
        function showExamForm() {
            currentExamType = document.getElementById('exam-type-select').value;
            const examFormContainer = document.getElementById('exam-form-container');
            const subjectsContainer = document.getElementById('subjects-container');

            if (currentExamType) {
                examFormContainer.style.display = 'block';
                subjectsContainer.innerHTML = ''; // Clear previous subjects

                const semData = semesterData[currentSemester];
                const examData = semData[currentExamType];

                // If first time adding for this exam type but we have subjects from other exams in same semester
                if (examData.subjects.length === 0) {
                    // Check if we can copy subjects from another exam type in the same semester
                    for (const examKey of ['ia1', 'ia2', 'ia3', 'sem']) {
                        if (semData[examKey].subjects.length > 0) {
                            // Copy subjects (not marks)
                            examData.subjects = semData[examKey].subjects.map(subject => ({
                                name: subject.name,
                                marks: ''
                            }));
                            break;
                        }
                    }
                }

                // Add existing subjects
                if (examData.subjects.length > 0) {
                    examData.subjects.forEach((subject, index) => {
                        addSubjectRow(subject.name, subject.marks);
                    });
                } else {
                    // Add empty subject row if no subjects
                    addSubject();
                }
                // Set CGPA if available
                document.getElementById('semester-cgpa').value = examData.cgpa || '';
            } else {
                examFormContainer.style.display = 'none';
            }
        }

        // Add a new subject input row
        function addSubject() {
            addSubjectRow('', '');
        }

        // Create subject row with optional pre-filled values
        function addSubjectRow(subjectName = '', marks = '') {
            const subjectsContainer = document.getElementById('subjects-container');
            const index = subjectsContainer.children.length;

            const row = document.createElement('div');
            row.className = 'subject-row';
            row.innerHTML = `
                <input type="text" placeholder="Subject Name" value="${subjectName}" 
                       onchange="updateSubjectName(${index}, this.value)" required>
                <input type="number" placeholder="Marks" min="0" max="100" value="${marks}" 
                       onchange="updateSubjectMarks(${index}, this.value)" 
                       oninput="validateMarks(this)">
                <button type="button" class="remove-subject" onclick="removeSubject(${index})">
                    <i class="fas fa-times"></i>
                </button>
            `;

            subjectsContainer.appendChild(row);

            // Add validation to the newly added inputs
            const marksInput = row.querySelector('input[type="number"]');
            marksInput.addEventListener('blur', () => validateMarks(marksInput));

            // Also update our data model if this is a new subject
            if (index >= semesterData[currentSemester][currentExamType].subjects.length) {
                semesterData[currentSemester][currentExamType].subjects.push({
                    name: subjectName,
                    marks: marks
                });
            }
        }

        // Update subject name in the data model
        function updateSubjectName(index, name) {
            // Update in current exam
            semesterData[currentSemester][currentExamType].subjects[index].name = name;

            // Also update the name in other exams of the same semester for consistency
            ['ia1', 'ia2', 'ia3', 'sem'].forEach(examType => {
                if (examType !== currentExamType &&
                    semesterData[currentSemester][examType].subjects[index]) {
                    semesterData[currentSemester][examType].subjects[index].name = name;
                }
            });
        }

        // Update subject marks in the data model
        function updateSubjectMarks(index, marks) {
            semesterData[currentSemester][currentExamType].subjects[index].marks = marks;
        }
        // Remove a subject
        function removeSubject(index) {
            const subjectsContainer = document.getElementById('subjects-container');
            subjectsContainer.removeChild(subjectsContainer.children[index]);

            // Remove from all exam types in this semester
            ['ia1', 'ia2', 'ia3', 'sem'].forEach(examType => {
                if (semesterData[currentSemester][examType].subjects.length > index) {
                    semesterData[currentSemester][examType].subjects.splice(index, 1);
                }
            });

            // Update indices for remaining subjects
            const subjectRows = subjectsContainer.getElementsByClassName('subject-row');
            for (let i = 0; i < subjectRows.length; i++) {
                const row = subjectRows[i];
                const inputs = row.getElementsByTagName('input');
                const button = row.getElementsByTagName('button')[0];

                // Update onchange and onclick handlers with new indices
                inputs[0].setAttribute('onchange', `updateSubjectName(${i}, this.value)`);
                inputs[1].setAttribute('onchange', `updateSubjectMarks(${i}, this.value)`);
                button.setAttribute('onclick', `removeSubject(${i})`);
            }
        }
        // Save the marks and CGPA
        function saveMarks() {
            // Validate all inputs before saving
            let isValid = true;

            // Validate subject inputs
            const subjectNameInputs = document.querySelectorAll('#subjects-container input[type="text"]');
            const marksInputs = document.querySelectorAll('#subjects-container input[type="number"]');

            subjectNameInputs.forEach((input) => {
                if (!input.value.trim()) {
                    showError(input, 'Subject name is required');
                    isValid = false;
                } else {
                    clearError(input);
                }
            });

            marksInputs.forEach((input) => {
                if (!validateMarks(input)) {
                    isValid = false;
                }
            });

            // Validate CGPA
            const cgpaInput = document.getElementById('semester-cgpa');
            if (!validateCGPA(cgpaInput)) {
                isValid = false;
            }

            if (!isValid) {
                return; // Don't save if validation fails
            }

            const cgpa = cgpaInput.value;
            semesterData[currentSemester][currentExamType].cgpa = cgpa;

            // Prepare data for server submission
            const dataToSave = {
                semester: currentSemester,
                examType: currentExamType,
                subjects: semesterData[currentSemester][currentExamType].subjects,
                cgpa: cgpa
            };

            // Show saving indicator
            const saveButton = document.querySelector('.form-actions .primary-button');
            saveButton.textContent = 'Saving...';
            saveButton.disabled = true;

            // Send data to server
            fetch('/student/api/performance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(dataToSave)
            })
                .then(response => response.json())
                .then(data => {
                    saveButton.textContent = 'Save';
                    saveButton.disabled = false;

                    if (data.success) {
                        // Show success message
                        const successMessage = document.createElement('div');
                        successMessage.className = 'success-message';
                        successMessage.textContent = 'Performance data saved successfully!';
                        successMessage.style.backgroundColor = '#e8f5e9';
                        successMessage.style.color = '#2e7d32';
                        successMessage.style.padding = '8px 12px';
                        successMessage.style.borderRadius = '4px';
                        successMessage.style.marginBottom = '10px';

                        const formContainer = document.getElementById('exam-form-container');
                        formContainer.prepend(successMessage);

                        // Remove message after 3 seconds
                        setTimeout(() => {
                            successMessage.remove();
                        }, 3000);

                        // Update chart with new data
                        displayPerformanceChart();
                    } else {
                        alert('Error saving data: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    saveButton.textContent = 'Save';
                    saveButton.disabled = false;
                    alert('Failed to save data. Please try again.');
                });
        }

        function validateMarks(input) {
            const value = input.value;
            if (value === '') return true; // Empty is valid

            const numValue = parseFloat(value);

            if (isNaN(numValue)) {
                showError(input, 'Please enter a valid number');
                return false;
            }

            if (numValue < 0 || numValue > 100) {
                showError(input, 'Marks must be between 0 and 100');
                return false;
            }

            clearError(input);
            return true;
        }

        function validateCGPA(input) {
            const value = input.value;
            if (value === '') return true; // Empty is valid

            const numValue = parseFloat(value);

            if (isNaN(numValue)) {
                showError(input, 'Please enter a valid number');
                return false;
            }

            if (numValue < 0 || numValue > 10) {
                showError(input, 'CGPA must be between 0 and 10');
                return false;
            }

            clearError(input);
            return true;
        }

        document.addEventListener('DOMContentLoaded', function () {
            loadPerformanceData();

            // Add validation to CGPA input
            const cgpaInput = document.getElementById('semester-cgpa');
            cgpaInput.addEventListener('input', () => validateCGPA(cgpaInput));
            cgpaInput.addEventListener('blur', () => validateCGPA(cgpaInput));
        });

        function showError(input, message) {
            // Remove any existing error
            clearError(input);

            // Create error element
            const error = document.createElement('div');
            error.className = 'input-error';
            error.textContent = message;
            error.style.color = '#d9534f';
            error.style.fontSize = '0.8rem';
            error.style.marginTop = '4px';

            // Insert after input
            input.parentNode.insertBefore(error, input.nextSibling);

            // Add error class to input
            input.classList.add('has-error');
            input.style.borderColor = '#d9534f';
        }

        function clearError(input) {
            // Remove error message if exists
            const parent = input.parentNode;
            const errorElement = parent.querySelector('.input-error');
            if (errorElement) {
                parent.removeChild(errorElement);
            }

            // Remove error class
            input.classList.remove('has-error');
            input.style.borderColor = '';
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let performanceChart = null;

        // Function to display performance chart
        function displayPerformanceChart() {
            if (!currentSemester || !semesterData[currentSemester]) {
                document.getElementById('performance-chart-container').style.display = 'none';
                return;
            }

            const chartContainer = document.getElementById('performance-chart-container');
            const chartCanvas = document.getElementById('performance-chart');

            // Get all subjects and their marks across all exam types for the current semester
            const semData = semesterData[currentSemester];

            // Check if we have data to display
            let hasData = false;
            for (const examType of ['ia1', 'ia2', 'ia3', 'sem']) {
                if (semData[examType].subjects.length > 0 &&
                    semData[examType].subjects.some(s => s.marks !== '')) {
                    hasData = true;
                    break;
                }
            }

            if (!hasData) {
                chartContainer.style.display = 'none';
                return;
            }

            // Get unique subjects across all exam types
            const allSubjects = new Set();
            for (const examType of ['ia1', 'ia2', 'ia3', 'sem']) {
                semData[examType].subjects.forEach(subject => {
                    if (subject.name) allSubjects.add(subject.name);
                });
            }

            const subjects = Array.from(allSubjects);

            // Prepare data for chart
            const chartData = {
                labels: subjects,
                datasets: [
                    {
                        label: '1st Internal',
                        data: subjects.map(subject => {
                            const subjectData = semData.ia1.subjects.find(s => s.name === subject);
                            return subjectData && subjectData.marks !== '' ? subjectData.marks : null;
                        }),
                        backgroundColor: 'rgba(128, 0, 0, 0.6)',
                        borderColor: 'rgba(128, 0, 0, 1)',
                        borderWidth: 1
                    },
                    {
                        label: '2nd Internal',
                        data: subjects.map(subject => {
                            const subjectData = semData.ia2.subjects.find(s => s.name === subject);
                            return subjectData && subjectData.marks !== '' ? subjectData.marks : null;
                        }),
                        backgroundColor: 'rgba(255, 218, 185, 0.6)',
                        borderColor: 'rgba(255, 218, 185, 1)',
                        borderWidth: 1
                    },
                    {
                        label: '3rd Internal',
                        data: subjects.map(subject => {
                            const subjectData = semData.ia3.subjects.find(s => s.name === subject);
                            return subjectData && subjectData.marks !== '' ? subjectData.marks : null;
                        }),
                        backgroundColor: 'rgba(255, 166, 0, 0.6)',
                        borderColor: 'rgba(255, 166, 0, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'Semester End',
                        data: subjects.map(subject => {
                            const subjectData = semData.sem.subjects.find(s => s.name === subject);
                            return subjectData && subjectData.marks !== '' ? subjectData.marks : null;
                        }),
                        backgroundColor: 'rgba(139, 69, 19, 0.6)',
                        borderColor: 'rgba(139, 69, 19, 1)',
                        borderWidth: 1
                    }
                ]
            };

            // Display the chart container
            chartContainer.style.display = 'block';

            // Destroy previous chart if exists
            if (performanceChart) {
                performanceChart.destroy();
            }

            // Create new chart
            performanceChart = new Chart(chartCanvas, {
                type: 'bar',
                data: chartData,
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            title: {
                                display: true,
                                text: 'Marks'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Subjects'
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: `Semester ${currentSemester} Performance`,
                            color: '#800000',
                            font: {
                                size: 16,
                                weight: 'bold'
                            }
                        },
                        tooltip: {
                            callbacks: {
                                title: function (context) {
                                    return context[0].label;
                                },
                                label: function (context) {
                                    return context.dataset.label + ': ' + context.formattedValue + '/100';
                                }
                            }
                        }
                    }
                }
            });
        }
    </script>

    <script>
        // Load announcements from proctor
        function loadAnnouncements() {
            fetch('/student/api/announcements')
                .then(response => response.json())
                .then(data => {
                    const announcementsList = document.getElementById('announcements-list');

                    if (data.success && data.announcements.length > 0) {
                        let html = '<ul class="announcements">';
                        data.announcements.forEach(announcement => {
                            const date = new Date(announcement.created_at).toLocaleDateString();
                            html += `
                                <li class="announcement-item">
                                    <div class="announcement-header">
                                        <span class="announcement-title">${announcement.title}</span>
                                        <span class="announcement-date">${date}</span>
                                    </div>
                                    <div class="announcement-content">${announcement.content}</div>
                                    <div class="announcement-footer">
                                        <span class="proctor-name">From: ${announcement.proctor_name}</span>
                                    </div>
                                </li>
                            `;
                        });
                        html += '</ul>';
                        announcementsList.innerHTML = html;
                    } else {
                        announcementsList.innerHTML = '<p>No announcements from your proctor yet.</p>';
                        if (data.message) {
                            announcementsList.innerHTML += `<p>${data.message}</p>`;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error loading announcements:', error);
                    document.getElementById('announcements-list').innerHTML =
                        '<p>Error loading announcements. Please refresh the page.</p>';
                });
        }

        // Load announcements when the page loads
        document.addEventListener('DOMContentLoaded', loadAnnouncements);
    </script>
</body>

</html>